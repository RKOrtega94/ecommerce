// ================================
// PLUGIN DEFINITIONS AND VERSIONS
// ================================
plugins {
    id "org.springframework.boot" version "3.5.5" apply false
    id "io.spring.dependency-management" version "1.1.7" apply false
    id "com.google.protobuf" version "0.9.5" apply false
    id "org.flywaydb.flyway" version "11.12.0" apply false
    id "com.github.ben-manes.versions" version "0.53.0"
    id "java"
}

// ================================
// GLOBAL CONFIGURATION
// ================================
allprojects {
    group = "com.ecommerce"
    version = "1.0.0"

    repositories {
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
    }
}

// ================================
// SHARED DEPENDENCY VERSIONS
// ================================
ext {
    // ===============================
    // Protocol Buffers and gRPC
    // ===============================
    protoBufGroup = "com.google.protobuf"
    protoBufVersion = "3.24.4"
    ioGrpc = "io.grpc"
    grpcVersion = "1.75.0"
    springBootVersion = "3.5.5"
    springCloudVersion = "2025.0.0"
    lombokVersion = "1.18.38"
    grpcSpringBootVersion = "3.1.0.RELEASE"
    jwtVersion = "0.12.7"
    modelmapperVersion = "3.2.4"
    mapstructVersion = "1.6.3"
}

// ================================
// DEPENDENCY UPDATE SETTINGS
// ================================
dependencyUpdates {
    rejectVersionIf {
        !isStable(it.candidate.version)
    }
}

// ================================
// SUBPROJECTS CONFIGURATION
// ================================
subprojects {
    // Skip configuration for container projects that don't have source code
    if (project.path in [":core", ":libs", ":services"]) {
        return
    }

    apply plugin: "java"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(24) // Use Java 24 to match installed JDK
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
    }

    // Common dependencies for all projects
    dependencies {
        implementation "org.slf4j:slf4j-api:2.0.17"
        implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"

        // Lombok for all projects except config_server
        if (project.name != "config_server") {
            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        }

        // Testing dependencies
        testImplementation "org.junit.jupiter:junit-jupiter"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    }

    test {
        useJUnitPlatform()
    }
}

// ================================
// CORE PROJECTS CONFIGURATION
// ================================
configure(subprojects.findAll { it.path.contains(":core:") }) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    // Config Server specific configuration
    if (project.name == "config_server") {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter'
            implementation 'org.springframework.boot:spring-boot-starter-actuator'
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            developmentOnly 'org.springframework.boot:spring-boot-devtools'
            implementation 'org.springframework.cloud:spring-cloud-config-server'
            testImplementation 'org.springframework.boot:spring-boot-starter-test'
        }

        springBoot {
            mainClass = 'com.rkortega.config_server.ConfigServerApplication'
        }
    } else {
        dependencies {
            // Core Spring Boot dependencies
            implementation "org.springframework.boot:spring-boot-starter"
            implementation "org.springframework.boot:spring-boot-starter-actuator"
            implementation "org.springframework.boot:spring-boot-starter-validation"
            developmentOnly "org.springframework.boot:spring-boot-devtools"
            testImplementation "org.springframework.boot:spring-boot-starter-test"

            // Discovery Server specific
            if (project.name == "discovery-server") {
                implementation "org.springframework.cloud:spring-cloud-starter-config"
                implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server"
            }

            // Gateway specific
            if (project.name == "gateway") {
                implementation "org.springframework.cloud:spring-cloud-starter-config"
                implementation "org.springframework.cloud:spring-cloud-starter-gateway"
                implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
                testImplementation "io.projectreactor:reactor-test"
                testImplementation "org.springframework.security:spring-security-test"
            }

            // Identity specific
            if (project.name == "identity") {
                implementation "org.springframework.boot:spring-boot-starter-web"
                implementation "org.springframework.boot:spring-boot-starter-data-jpa"
                implementation "org.springframework.boot:spring-boot-starter-security"
                implementation "org.springframework.security:spring-security-oauth2-authorization-server"
                implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
                runtimeOnly "com.h2database:h2"
                runtimeOnly "org.postgresql:postgresql"

                // gRPC dependencies
                implementation "${ioGrpc}:grpc-netty-shaded:${grpcVersion}"
                implementation "${ioGrpc}:grpc-protobuf:${grpcVersion}"
                implementation "${ioGrpc}:grpc-stub:${grpcVersion}"
                implementation "${protoBufGroup}:protobuf-java:${protoBufVersion}"

                // Include libs dependencies
                implementation project(":libs:commons:lib")
                implementation project(":libs:grpc-common:lib")
            }
        }
    }
}

// ================================
// IDENTITY PROTOBUF CONFIGURATION
// ================================
configure(subprojects.findAll { it.name == "identity" && it.path.contains(":core:") }) {
    apply plugin: "com.google.protobuf"

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protoBufVersion}"
        }
        plugins {
            grpc {
                artifact = "${ioGrpc}:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

// ================================
// SERVICES PROJECTS CONFIGURATION
// ================================
configure(subprojects.findAll { it.path.contains(":services:") }) {
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "org.flywaydb.flyway"

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {
        // Core Spring Boot dependencies
        implementation "org.springframework.boot:spring-boot-starter"
        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        developmentOnly "org.springframework.boot:spring-boot-devtools"

        // Cloud configuration
        implementation("org.springframework.cloud:spring-cloud-starter-config") {
            exclude group: "org.springframework", module: "spring-webflux"
            exclude group: "io.projectreactor", module: "reactor-core"
            exclude group: "io.projectreactor.netty", module: "reactor-netty"
        }
        implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"

        // Database dependencies
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "org.springframework.boot:spring-boot-starter-data-redis"
        runtimeOnly "org.postgresql:postgresql"
        runtimeOnly "com.h2database:h2"

        // Security dependencies
        implementation "org.springframework.boot:spring-boot-starter-security"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
        implementation "org.springframework.security:spring-security-oauth2-jose"
        implementation "org.springframework.security:spring-security-oauth2-authorization-server"

        // JWT dependencies
        implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
        implementation "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
        implementation "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

        // Messaging
        implementation "org.springframework.kafka:spring-kafka"

        // Database migration
        implementation "org.flywaydb:flyway-core"
        implementation "org.flywaydb:flyway-database-postgresql"

        // Utilities
        implementation "org.modelmapper:modelmapper:${modelmapperVersion}"

        // gRPC dependencies (for runtime, not generation)
        implementation "${ioGrpc}:grpc-netty-shaded:${grpcVersion}"
        implementation "${ioGrpc}:grpc-protobuf:${grpcVersion}"
        implementation "${ioGrpc}:grpc-stub:${grpcVersion}"
        implementation "${protoBufGroup}:protobuf-java:${protoBufVersion}"
        implementation "${ioGrpc}:grpc-services:${grpcVersion}"

        // gRPC Spring Boot integration
        implementation "net.devh:grpc-server-spring-boot-starter:${grpcSpringBootVersion}"
        implementation "net.devh:grpc-client-spring-boot-starter:${grpcSpringBootVersion}"
        implementation "net.devh:grpc-common-spring-boot:${grpcSpringBootVersion}"

        // Include commons lib
        implementation project(":libs:commons:lib")
        implementation project(":libs:grpc-common:lib")

        // Mapstruct
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
        annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

        // Testing dependencies
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "org.springframework.security:spring-security-test"
        testImplementation "org.springframework.boot:spring-boot-testcontainers"
        testImplementation "org.testcontainers:junit-jupiter"
        testImplementation "org.testcontainers:postgresql"
    }

    // Java compilation configuration for annotation processing
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ["-Amapstruct.defaultComponentModel=spring",
                                 "-Amapstruct.suppressGeneratorTimestamp=true"]
    }

    // Flyway configuration
    flyway {
        url = "jdbc:postgresql://${System.getenv('DB_HOST') ?: 'localhost'}:${System.getenv('DB_PORT') ?: '5432'}/${System.getenv('DB_NAME') ?: 'mydb'}"
        user = System.getenv('DB_USER') ?: 'user'
        password = System.getenv('DB_PASSWORD') ?: 'password'
        locations = ["classpath:db/migration"]
    }
}

// ================================
// SERVICE-SPECIFIC CONFIGURATIONS
// ================================
configure(subprojects.findAll { it.name == "core" && it.path.contains(":services:") }) {
    springBoot {
        mainClass = "com.rkortega.core_service.CoreServiceApplication"
    }
}

// ================================
// DISCOVERY SERVER SPECIFIC CONFIGURATION
// ================================
configure(subprojects.findAll { it.name == "discovery-server" && it.path.contains(":core:") }) {
    springBoot {
        mainClass = "com.ecommerce.discovery_server.DiscoveryServerApplication"
    }
    // Add any additional custom configuration for discovery-server here
}

// ================================
// LIBS PROJECTS CONFIGURATION
// ================================
configure(subprojects.findAll { it.path.contains(":libs:") && it.name == "lib" }) {
    apply plugin: "java-library"
    apply plugin: "maven-publish"

    dependencies {
        // Commons lib specific dependencies
        if (project.path.contains(":commons:")) {
            // Core Spring dependencies
            api "org.springframework:spring-core:6.2.6"
            api "org.springframework:spring-context:6.2.6"
            api "org.springframework:spring-beans:6.2.6"
            api "org.springframework:spring-web:6.2.6"

            // Spring Data JPA for pagination and entity support
            api "org.springframework.data:spring-data-commons:3.5.4"
            api "org.springframework.data:spring-data-jpa:3.5.4"

            // JPA and Hibernate dependencies
            api "jakarta.persistence:jakarta.persistence-api:3.2.0"
            api "org.hibernate.orm:hibernate-core:6.6.1.Final"
            api "org.hibernate.orm:hibernate-jpamodelgen:6.6.1.Final" // For annotation processing

            // Spring Boot dependencies for autoconfiguration and server customization
            api "org.springframework.boot:spring-boot:3.5.5"
            api "org.springframework.boot:spring-boot-autoconfigure:3.5.5"
            api "org.springframework.boot:spring-boot-starter-webflux:3.5.5" // For Netty support

            // Jackson for JSON processing
            api "com.fasterxml.jackson.core:jackson-databind:2.19.1"
            api "com.fasterxml.jackson.core:jackson-core:2.19.1"

            // Apache Commons utilities
            api "org.apache.commons:commons-lang3:3.14.0"
            api "commons-codec:commons-codec:1.16.0"

            // ModelMapper for object mapping
            api "org.modelmapper:modelmapper:${modelmapperVersion}"

            // Spring Security for OAuth2 and configuration
            api "org.springframework.security:spring-security-oauth2-jose:6.4.5"
            api "org.springframework.security:spring-security-config:6.4.5"

            // Kafka for messaging
            api "org.springframework.kafka:spring-kafka:3.3.7"
            api "org.apache.kafka:kafka-clients:4.0.0"

            // Reactor for reactive programming
            api "io.projectreactor:reactor-core:3.6.6"

            // Logging
            implementation "org.slf4j:slf4j-api:2.0.17"

            // Lombok for annotation processing
            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        }

        // XML signer lib specific dependencies
        if (project.path.contains(":xml_signer:")) {
            api "com.googlecode.xades4j:xades4j:1.7.0"
            api "org.slf4j:slf4j-simple:2.0.16"
        }
        // gRPC common lib has its own build.gradle, so skip it here
    }
}

// ================================
// gRPC-COMMON LIB PROTOBUF CONFIGURATION
// ================================
configure(subprojects.findAll { it.path.contains(":libs:grpc-common:lib") }) {
    apply plugin: "com.google.protobuf"
    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${protoBufVersion}"
        }
        plugins {
            grpc {
                artifact = "${ioGrpc}:protoc-gen-grpc-java:${grpcVersion}"
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }
}

// ================================
// UTILITY FUNCTIONS
// ================================
def isStable(String version) {
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return stableKeyword || version ==~ regex
}

// ================================
// IMPROVED CLEAN TASKS
// ================================
tasks.register('stopDaemons') {
    group = 'build'
    description = 'Stop all Gradle daemons'
    doLast {
        try {
            project.exec {
                commandLine './gradlew', '--stop'
                ignoreExitValue = true
            }
        } catch (Exception e) {
            logger.warn("Failed to stop daemons: ${e.message}")
        }
    }
}

tasks.register('forceClean') {
    group = 'build'
    description = 'Force clean all build directories'
    dependsOn 'stopDaemons'

    doLast {
        // Wait for daemons to stop
        Thread.sleep(2000)

        // Define build directories to clean
        def buildDirs = ['build',
                         '.gradle',
                         'libs/commons/build',
                         'libs/commons/lib/build',
                         'libs/grpc-common/build',
                         'libs/grpc-common/lib/build',
                         'libs/xml_signer/build',
                         'libs/xml_signer/lib/build',
                         'core/config_server/build',
                         'core/discovery-server/build',
                         'core/gateway/build',
                         'core/identity/build',
                         'services/core/build',
                         'services/security/build',
                         'services/invoicing/build']

        buildDirs.each { dirPath ->
            def dir = file(dirPath)
            if (dir.exists()) {
                try {
                    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                        // Use PowerShell's Remove-Item for better compatibility
                        project.exec {
                            commandLine 'powershell', '-Command', "Remove-Item -Recurse -Force '${dir.absolutePath}'"
                            ignoreExitValue = true
                        }
                    } else {
                        // Use Unix-style deletion
                        project.exec {
                            commandLine 'rm', '-rf', dir.absolutePath
                            ignoreExitValue = true
                        }
                    }
                    logger.lifecycle("Deleted: ${dirPath}")
                } catch (Exception e) {
                    logger.warn("Could not delete: ${dirPath} - ${e.message}")
                }
            }
        }
    }
}

// Make clean depend on forceClean when on Windows and build files are locked
if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    tasks.named('clean').configure {
        doFirst {
            // Check if any build directories are locked
            def locked = false
            ['libs/commons/build', 'libs/grpc-common/build'].each {
                def dir = file(it)
                if (dir.exists() && !dir.canWrite()) {
                    locked = true
                }
            }

            if (locked) {
                logger.lifecycle("Detected locked files, running forceClean first...")
                tasks.forceClean.execute()
            }
        }
    }
}
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - kafka-net
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-data:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "127.0.0.1", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always # Restart Zookeeper if it fails
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - kafka-net
    ports:
      - "9092:9092"
      - "9101:9101"   # JMX exporter
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_PROCESS_ROLES: broker
      # Listeners internals y externos:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Retención y logs
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # Monitorización (JMX)
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/var/lib/kafka/logs
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      retries: 5
    restart: always # Restart Kafka if it fails
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    networks:
      - kafka-net
    ports:
      - "9000:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: "prod-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      # Si usas TLS/SASL, añade: 
      # KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "SSL"
      # KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: "/opt/kafka-ui/certs/truststore.jks"
      # KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: "changeit"
      # Monta tus certs si procede:
    volumes:
      - ./certs:/opt/kafka-ui/certs:ro
    restart: always # Restart Kafka UI if it fails
  redis:
    image: redis:latest
    command: redis-server
    ports:
      - "6379:6379" # Expose port 6379 for Redis
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "ping" ] # Health check command
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s # Wait 10 seconds before starting health checks
    restart: always # Restart Redis if it fails
  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    ports:
      - "8081:8081" # Expose port 8081 for Nexus
    volumes:
      - nexus-data:/nexus-data # Persist Nexus data
    environment:
      - INSTALL4J_ADD_VM_PARAMS=-Xms512m -Xmx1200m # JVM memory settings
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status" ] # Health check endpoint
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s # Wait 3 minutes before starting health checks (Nexus takes time to start)
    restart: always # Restart Nexus if it fails
  # Database (PostgreSQL)
  database:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./create-databases.sql:/docker-entrypoint-initdb.d/create-databases.sql # SQL script to create databases
      - postgres-data:/var/lib/postgresql/data # Persist PostgreSQL data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    restart: always # Restart the database if it fails
  # Configuration Server
  config-server:
    build:
      context: ./backend/core/config_server
      dockerfile: Dockerfile
    ports:
      - "8888:8888" # Expose port 8888 for the config server
    environment:
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
    env_file:
      - .env # Load environment variables from .env file
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ] # Health check endpoint
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s # Wait 120 seconds before starting health checks
    restart: always # Restart the config server if it fails
  # API Gateway
  gateway:
    build:
      context: ./backend/core/gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Expose port 8080 for the gateway
    environment:
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888 # Point to the config server
      - SECURITY_SERVER_HOST=security-server # Host for the security server
      - SECURITY_SERVER_PORT=8082 # Port for the auth service
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be healthy
      redis:
        condition: service_healthy # Wait for Redis to be healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ] # Health check endpoint
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always # Restart the gateway if it fails
  # Security Server
  security-server:
    build:
      context: ./backend/services/security
      dockerfile: Dockerfile
      args:
        - SERVER_PORT=8082 # Build argument for server port
        - GRPC_PORT=9092 # Build argument for gRPC port
    ports:
      - "8082:8082" # Expose port 8082 for the security server
      - "9090:9090" # Expose port 9090 the security server (if needed)
    environment:
      - APP_NAME=security # Application name for the security server
      - SERVER_PORT=8082 # Server port for the security server
      - GRPC_PORT=9092 # gRPC port for the security server
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
      - DB_HOST=database # Host for the database
      - DB_PORT=5432 # Port for the database
      - DB_NAME=security # Database name
      - DB_USER=postgres # Database user
      - DB_PASSWORD=postgres # Database password
      - REDIS_HOST=redis # Host for Redis
      - REDIS_PORT=6379 # Port for Redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-"password"} # Use environment variable for Redis password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Kafka bootstrap servers
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be healthy
      database:
        condition: service_healthy # Wait for the database to be healthy
      nexus:
        condition: service_healthy # Wait for Nexus to be healthy
      redis:
        condition: service_healthy # Wait for Redis to be healthy
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8082/health/security/status", "--fail" ] # Health check endpoint
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always # Restart the security server if it fails
  core-service:
    build:
      context: ./backend/services/core
      dockerfile: Dockerfile
      args:
        - SERVER_PORT=8083 # Build argument for server port
    ports:
      - "8083:8083" # Expose port 8083 for the core service
    environment:
      - SERVER_PORT=8083 # Server port for the core service
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
      - DB_HOST=database # Host for the database
      - DB_PORT=5432 # Port for the database
      - DB_NAME=core # Database name
      - DB_USER=postgres # Database user
      - DB_PASSWORD=postgres # Database password
      - SECURITY_SERVER_HOST=security-server # Host for the security server
      - SECURITY_SERVER_PORT=8082 # Port for the security server
    env_file:
      - .env
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be healthy
      database:
        condition: service_healthy # Wait for the database to be healthy
    #      security-server:
    #        condition: service_healthy # Wait for security-server to be healthy
    # healthcheck:
    #   test: [ "CMD", "curl", "http://localhost:8083/actuator/health" ] # Health check endpoint
    #   interval: 30s
    #   timeout: 30s
    #   retries: 3
    restart: always # Restart the core service if it fails

volumes:
  nexus-data: # Volume for Nexus data
  postgres-data: # Volume for PostgreSQL data
  redisinsight: # Volume for RedisInsight data
  zk-data: # Volume for Zookeeper data
  kafka-data: # Volume for Kafka data
  kafka-logs: # Volume for Kafka logs
networks:
  default:
    driver: bridge # Use bridge network for all services
  kafka-net:
    driver: bridge # Use a separate bridge network for Kafka and Zookeeper
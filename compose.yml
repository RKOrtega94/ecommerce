services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    volumes:
      - zk-data:/var/lib/zookeeper/data
      - zk-log:/var/lib/zookeeper/log
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "127.0.0.1", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always # Restart Zookeeper if it fails
  kafka:
    image: apache/kafka:4.0.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - kafka-logs:/tmp/kafka-logs
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      retries: 5
    restart: always # Restart Kafka if it fails
    user: "0:0"
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "9000:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: "prod-cluster"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
      # Si usas TLS/SASL, a√±ade:
      # KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: "SSL"
      # KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_LOCATION: "/opt/kafka-ui/certs/truststore.jks"
      # KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE_PASSWORD: "changeit"
      # Monta tus certs si procede:
    volumes:
      - ./certs:/opt/kafka-ui/certs:ro
    restart: always # Restart Kafka UI if it fails
  redis:
    image: redis:latest
    command: redis-server
    ports:
      - "6379:6379" # Expose port 6379 for Redis
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "ping" ] # Health check command
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s # Wait 10 seconds before starting health checks
    restart: always # Restart Redis if it fails
  config-server:
    build:
      context: ./backend/core/config_server
      args:
        - SERVER_PORT=8888 # Build argument for server port
        - ACTIVE_PROFILE=dev # Build argument for active profile
        - APPLICATION_NAME=config_server # Build argument for application name
        - BUILD_VERSION=1.0.0 # Build argument for the version
    image: config-server:latest
    ports:
      - "8888:8888" # Expose port 8888 for the config server
    env_file:
      - .env # Load environment variables from .env file
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8888/health/config_server/status", "--fail" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always # Restart the config server if it fails
  gateway:
    build:
      context: ./backend/core/gateway
      args:
        - SERVER_PORT=8080 # Build argument for server port
        - ACTIVE_PROFILE=dev # Build argument for active profile
        - APPLICATION_NAME=gateway # Build argument for application name
        - BUILD_VERSION=1.0.0 # Build argument for the version
    image: gateway:latest
    ports:
      - "8080:8080" # Expose port 8080 for the gateway
    environment:
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888 # Point to the config server
      - SECURITY_SERVER_HOST=security-server # Host for the security server
      - SECURITY_SERVER_PORT=8082 # Port for the auth service
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be healthy
    env_file:
      - .env # Load environment variables from .env file
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8080/health/gateway/status", "--fail" ]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    restart: always # Restart the gateway if it fails
  database:
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=
      - POSTGRES_DB=postgres
    volumes:
      - ./create-databases.sql:/docker-entrypoint-initdb.d/create-databases.sql # SQL script to create databases
      - postgres-data:/var/lib/postgresql/data # Persist PostgreSQL data
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s
    restart: always # Restart the database if it fails
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - database
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    restart: always
  security-server:
    build:
      context: ./backend/services/security
      args:
        - SERVER_PORT=8082 # Build argument for server port
        - GRPC_PORT=9082 # Build argument for gRPC
        - APPLICATION_NAME=security # Build argument for application name
        - BUILD_VERSION=1.0.0 # Build argument for the version
        - ACTIVE_PROFILE=dev # Build argument for active profile
    image: security-server:latest
    ports:
      - "8082:8082" # Expose port 8082 for the security server
      - "9082:9082" # Expose port 9082 for the security server (if needed)
    environment:
      - APP_NAME=security # Application name for the security server
      - SERVER_PORT=8082 # Server port for the security server
      - GRPC_PORT=9082 # gRPC port for the security server
      - SPRING_PROFILES_ACTIVE=dev # Set Spring profile to 'dev'
      - DB_HOST=database # Host for the database
      - DB_PORT=5432 # Port for the database
      - DB_NAME=security # Database name
      - DB_USER=postgres # Database user
      - DB_PASSWORD=postgres # Database password
      - REDIS_HOST=redis # Host for Redis
      - REDIS_PORT=6379 # Port for Redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-"password"} # Use environment variable for Redis password
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # Kafka bootstrap servers
      - KEYSTORE_PATH=/app/keys # Set the correct path for keys inside container
    env_file:
      - .env # Load environment variables from .env file
    depends_on:
      config-server:
        condition: service_healthy # Wait for config-server to be healthy
      database:
        condition: service_healthy # Wait for the database to be healthy
      redis:
        condition: service_healthy # Wait for Redis to be healthy
      kafka:
        condition: service_healthy # Wait for Kafka to be healthy
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:8082/health/security/status", "--fail" ] # Health check endpoint
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 120s # Wait 120 seconds before starting health checks
    restart: always # Restart the security server if it fails

volumes:
  postgres-data: # Volume for PostgreSQL data
  redisinsight: # Volume for RedisInsight data
  zk-data: # Volume for Zookeeper data
  zk-log: # Volume for Zookeeper log
  kafka-data: # Volume for Kafka data
  kafka-logs: # Volume for Kafka logs
  pgadmin-data: # Volume for pgAdmin data
networks:
  default:
    driver: bridge # Use bridge network for all services
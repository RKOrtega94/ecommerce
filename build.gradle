buildscript {
    ext {
        springBootVersion = '3.5.3'
        springCloudVersion = '2025.0.0'
        lombokVersion = '1.18.38'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:0.9.5"
        classpath "org.flywaydb:flyway-gradle-plugin:11.10.1"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.11.1"
    }
}

apply plugin: "com.github.ben-manes.versions"

def nexusUrl = project.findProperty("nexus.url") ?: 'http://localhost:8081'
def nexusRepo = project.findProperty("nexus.repository") ?: 'ecommerce'
def nexusUsername = project.findProperty("nexus.username") ?: 'admin'
def nexusPassword = project.findProperty("nexus.password") ?: '123456'

allprojects {
    group = 'com.ecommerce'
    version = '1.0.0'

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = uri("$nexusUrl/repository/$nexusRepo/")
            allowInsecureProtocol = true
            credentials {
                username = nexusUsername
                password = nexusPassword
            }
        }
    }
}

subprojects {
    // Skip configuration for container projects that don't have source code
    if (project.path in [':backend', ':backend:core', ':backend:libs', ':backend:services']) {
        return
    }

    apply plugin: 'java'

    if (!it.path.startsWith(':backend:libs:')) {
        apply plugin: 'com.google.protobuf'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'org.flywaydb.flyway'
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(24)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    if (!it.path.startsWith(':backend:libs:')) {
        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }

        dependencies {
            implementation 'org.slf4j:slf4j-api:2.0.17'
            implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'
        }
    }
}

// Plugins y dependencias específicas para ciertos módulos
def appModules = subprojects.findAll {
    it.path in [':backend:core:config_server', ':backend:core:gateway', ':backend:services:core', ':backend:services:security']
}

configure(appModules) {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

// Lombok + Config Client (excluyendo config_server y bibliotecas)
configure(subprojects.findAll {
    !['config_server'].contains(it.name) &&
            !it.path.startsWith(':backend:libs:') &&
            !(it.path in [':backend', ':backend:core', ':backend:libs', ':backend:services'])
}) {
    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
    }
}

// Servicios principales (excluye config_server y gateway)
configure(subprojects.findAll {
    !it.path.startsWith(':backend:libs:') &&
            !['config_server', 'gateway'].contains(it.name) &&
            !(it.path in [':backend', ':backend:core', ':backend:libs', ':backend:services'])
}) {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
        implementation 'org.springframework.security:spring-security-oauth2-jose'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.flywaydb:flyway-core'
        implementation 'org.flywaydb:flyway-database-postgresql'
        implementation 'org.postgresql:postgresql'
        implementation 'org.mapstruct:mapstruct:1.6.3'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
        implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
        implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
        implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
        implementation project(":backend:libs:commons:lib")

        // gRPC
        implementation('net.devh:grpc-server-spring-boot-starter:3.1.0.RELEASE') {
            exclude group: 'net.devh', module: 'grpc-client-spring-boot-starter'
            exclude group: 'io.grpc', module: 'grpc-core'
            exclude group: 'io.grpc', module: 'grpc-protobuf'
            exclude group: 'io.grpc', module: 'grpc-stub'
            exclude group: 'io.grpc', module: 'grpc-api'
        }
        implementation 'io.grpc:grpc-core:1.63.0'
        implementation 'io.grpc:grpc-protobuf:1.63.0'
        implementation 'io.grpc:grpc-stub:1.63.0'
        implementation 'io.grpc:grpc-api:1.63.0'
        compileOnly 'org.apache.tomcat:annotations-api:6.0.53'

        // Testing
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.boot:spring-boot-testcontainers'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:postgresql'
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:3.25.5"
        }
        plugins {
            grpc {
                artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
            }
        }
        generateProtoTasks {
            all()*.plugins {
                grpc {}
            }
        }
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    def dbHost = System.getenv("DB_HOST") ?: "localhost"
    def dbPort = System.getenv("DB_PORT") ?: "5432"
    def dbName = System.getenv("DB_NAME") ?: "mydb"
    def dbUser = System.getenv("DB_USER") ?: "user"
    def dbPassword = System.getenv("DB_PASSWORD") ?: "password"

    flyway {
        url = "jdbc:postgresql://${dbHost}:${dbPort}/${dbName}"
        user = dbUser
        password = dbPassword
        locations = ["classpath:db/migration"]
    }
}
